package cn.geek.week2;

/**
 * @author lemon
 * @version 1.0.0
 * @Description TODO
 * @createTime 2020年02月23日 19:26:00
 */
public class Test {

    public static void main(String[] args) {

        /**
         *  ~位求反
         *
         *  常用场景   求相反数(和为0的两个数称为相反数) -1
         */
        System.out.println(~1 + 1);

        /**
         *  << 左移
         *
         *  各二进位全部左移若干位，高位丢弃，低位补0
         *
         *  左移常被用来做 * (2 ^ n)的运算，因为直接基于二进制运算，所以左移效率比 * (2 ^ n)高
         */
        System.out.println(3 << 2);

        /**
         *  >> 右移
         *
         *  各二进位全部右移若干位，正数高位补0，负数高位补1，低位丢弃
         *
         *  右移常被用来做 / (2 ^ n)的运算，因为直接基于二进制运算，所以右移效率比 / (2 ^ n)高
         */
        System.out.println(12 >> 2);

        /**
         *  >>> 无符号右移
         *
         *  各二进位全部右移若干位，高位补0，低位丢弃
         */

        /**
         *
         *  & 位与
         *  运算符两边有0，结果就为0 ，只有当两边同时为1是，结果才为1。
         *
         *  | 位或
         *  运算规则就是 运算符两边有1，结果就为1 ，只有当两边同时为0是，结果才为0
         *
         *  ^ 位异或
         *  当运算符两边相同位置都是相同，结果返回0，不相同时返回1
         *
         */

    }
}
